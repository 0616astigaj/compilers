/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
    package Parse;
    public class MiniJava implements MiniJavaConstants {

  final public void Goal() throws ParseException {
    MainClassDeclaration();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(4)) {
        ThreadDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ClassDeclaration();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
  }

  final public void MainClassDeclaration() throws ParseException {
    jj_consume_token(7);
    jj_consume_token(ID);
    jj_consume_token(28);
    jj_consume_token(8);
    jj_consume_token(9);
    jj_consume_token(10);
    jj_consume_token(11);
    jj_consume_token(30);
    jj_consume_token(12);
    jj_consume_token(32);
    jj_consume_token(33);
    jj_consume_token(ID);
    jj_consume_token(31);
    jj_consume_token(28);
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      VarDeclaration();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case NUM:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      Statement();
    }
    jj_consume_token(29);
    jj_consume_token(29);
  }

  final public void ClassDeclaration() throws ParseException {
    jj_consume_token(7);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(28);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 17:
      case 18:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case ID:
        FieldDeclaration();
        break;
      case 8:
        MethodDeclaration();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(29);
  }

  final public void ThreadDeclaration() throws ParseException {
    jj_consume_token(7);
    jj_consume_token(ID);
    jj_consume_token(13);
    jj_consume_token(14);
    jj_consume_token(28);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 17:
      case 18:
      case ID:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case ID:
        FieldDeclaration();
        break;
      default:
        jj_la1[7] = jj_gen;
        if (jj_2_3(3)) {
          MethodDeclaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 8:
            VoidDeclaration();
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(29);
  }

  final public void VarDeclaration() throws ParseException {
    Type();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      Expression();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(35);
  }

  final public void MethodDeclaration() throws ParseException {
    jj_consume_token(8);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    Type();
    jj_consume_token(ID);
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 18:
    case ID:
      Type();
      jj_consume_token(ID);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(34);
        Type();
        jj_consume_token(ID);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(31);
    jj_consume_token(28);
    label_7:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_7;
      }
      VarDeclaration();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case NUM:
      case ID:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      Statement();
    }
    jj_consume_token(16);
    Expression();
    jj_consume_token(35);
    jj_consume_token(29);
  }

  final public void VoidDeclaration() throws ParseException {
    jj_consume_token(8);
    jj_consume_token(10);
    jj_consume_token(ID);
    jj_consume_token(30);
    jj_consume_token(31);
    jj_consume_token(28);
    label_9:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_9;
      }
      VarDeclaration();
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case NUM:
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      Statement();
    }
    jj_consume_token(29);
  }

  final public void FieldDeclaration() throws ParseException {
    Type();
    jj_consume_token(ID);
    jj_consume_token(35);
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_11;
        }
        jj_consume_token(32);
        jj_consume_token(33);
      }
      break;
    case 18:
      jj_consume_token(18);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_12;
        }
        jj_consume_token(32);
        jj_consume_token(33);
      }
      break;
    case ID:
      jj_consume_token(ID);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_13;
        }
        jj_consume_token(32);
        jj_consume_token(33);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_14;
        }
        Statement();
      }
      jj_consume_token(29);
      break;
    case 19:
      jj_consume_token(19);
      jj_consume_token(30);
      Expression();
      jj_consume_token(31);
      Statement();
      if (jj_2_6(2)) {
        jj_consume_token(20);
        Statement();
      } else {
        ;
      }
      break;
    case 21:
      jj_consume_token(21);
      jj_consume_token(30);
      Expression();
      jj_consume_token(31);
      Statement();
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(36);
      jj_consume_token(ID);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 30:
      case 43:
      case NUM:
      case ID:
      case 52:
        Expression();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 34:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_15;
          }
          jj_consume_token(34);
          Expression();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(31);
      jj_consume_token(35);
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case NUM:
    case ID:
      Brackets();
      jj_consume_token(51);
      Expression();
      jj_consume_token(35);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression() throws ParseException {
    Logical_Or();
  }

  final public void Logical_Or() throws ParseException {
    Logical_And();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      Logical_Or2();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void Logical_Or2() throws ParseException {
    jj_consume_token(37);
    Logical_Or();
  }

  final public void Logical_And() throws ParseException {
    Equality();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      Logical_And2();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void Logical_And2() throws ParseException {
    jj_consume_token(38);
    Logical_And();
  }

  final public void Equality() throws ParseException {
    Relational();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      Equality2();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void Equality2() throws ParseException {
    jj_consume_token(39);
    Equality();
  }

  final public void Relational() throws ParseException {
    Additive();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
    case 41:
      Relational2();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void Relational2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      Relational();
      break;
    case 40:
      jj_consume_token(40);
      Relational();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Additive() throws ParseException {
    Multiplicative();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
    case 43:
      Additive2();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void Additive2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      Additive();
      break;
    case 43:
      jj_consume_token(43);
      Additive();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Multiplicative() throws ParseException {
    Unary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
      Multiplicative2();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void Multiplicative2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      Multiplicative();
      break;
    case 45:
      jj_consume_token(45);
      Multiplicative();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      Parens();
      break;
    case 52:
      jj_consume_token(52);
      Parens();
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case NUM:
    case ID:
      Parens();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Parens() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      Expression();
      jj_consume_token(31);
      break;
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case NUM:
    case ID:
      Method();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Method() throws ParseException {
    Brackets();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
    case 36:
      Method2();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  final public void Method2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
      jj_consume_token(ID);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 30:
      case 43:
      case NUM:
      case ID:
      case 52:
        Expression();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 34:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_16;
          }
          jj_consume_token(34);
          Expression();
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(31);
      Method();
      break;
    case 22:
      jj_consume_token(22);
      jj_consume_token(36);
      jj_consume_token(ID);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 30:
      case 43:
      case NUM:
      case ID:
      case 52:
        Expression();
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 34:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_17;
          }
          jj_consume_token(34);
          Expression();
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(31);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Brackets() throws ParseException {
    Dot();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      Brackets2();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public void Brackets2() throws ParseException {
    jj_consume_token(32);
    Expression();
    jj_consume_token(33);
    Brackets();
  }

  final public void Dot() throws ParseException {
    Term();
    if (jj_2_7(3)) {
      Dot2();
    } else {
      ;
    }
  }

  final public void Dot2() throws ParseException {
    jj_consume_token(36);
    jj_consume_token(ID);
    Dot();
  }

  final public void Term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      jj_consume_token(23);
      Type();
      jj_consume_token(30);
      jj_consume_token(31);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case 24:
      jj_consume_token(24);
      break;
    case 25:
      jj_consume_token(25);
      break;
    case 26:
      jj_consume_token(26);
      break;
    case 27:
      jj_consume_token(27);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(18)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(17)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(8)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(13)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x80,0x1fe80000,0x2000,0x60100,0x60100,0x60100,0x60000,0x100,0x0,0x8000,0x0,0x60000,0x1fe80000,0x1fe80000,0x0,0x0,0x0,0x60000,0x1fe80000,0x0,0x4f800000,0x1fe80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4f800000,0x4f800000,0x400000,0x0,0x4f800000,0x0,0x4f800000,0x400000,0x0,0xf800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xc000,0x0,0x8000,0x8000,0x8000,0x8000,0x0,0x80000,0x0,0x4,0x8000,0xc000,0xc000,0x1,0x1,0x1,0x8000,0xc000,0x4,0x10c800,0xc000,0x20,0x40,0x80,0x300,0x300,0xc00,0xc00,0x3000,0x3000,0x10c800,0xc000,0x10,0x4,0x10c800,0x4,0x10c800,0x10,0x1,0xc000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                          }
